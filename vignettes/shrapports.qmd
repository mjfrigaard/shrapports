---
title: "shrapports"
format: 
  html:
    toc: true
    toc-depth: 4
knitr:
  opts_chunk: 
    collapse: true
    comment: "# " 

execute:
  echo: true

vignette: >
  %\VignetteIndexEntry{Structure}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| label: setup
#| include: false
library(dplyr)
library(tidyr)
library(inspectdf)
library(lobstr)
```

```{r}
#| label: package
library(shrapports)
```

The goal of `shrapports` is to demonstrate how to use parameterized reports (R Markdown and/or Quarto) in Shiny applications. This document covers '*all you need to know to download reports from your Shiny app.*'

```{r}
#| eval: true
#| include: true
#| echo: false 
#| comment: ""
ast(
  launch_app(
    app_ui(
      mod_var_input_ui(
        get_tt_data()
      ),
      mod_viz_ui(),
      mod_table_ui()
    ),
    app_server(
      mod_var_input_server(),
      mod_viz_server(
        inspect_plot()
      ),
      mod_table_server()
    )
  )
)
```


## TidyTuesday data 

These data come from the [`tidytuesdayR`](https://github.com/dslc-io/tidytuesdayR) and [`ttmeta`](https://r4ds.github.io/ttmeta/) packages. The `get_tt_data()` function returns the dataset(s) from the data `title`:

```{r}
glimpse(all_tt_combined)
```


```{r}
#| label: ttd
ttd <- get_tt_data("Netflix Titles")
ttd_nms <- names(ttd)
ttd_nms
```

We can use the name to subset the list:

```{r}
glimpse(ttd[[ttd_nms]])
```

If `ttd` has two datasets, subset the list with the name position:

```{r}
#| label: ttd2
ttd2 <- get_tt_data("Space Launches")
ttd2_nms <- names(ttd2)
ttd2_nms
```

```{r}
ttd2_nms[1]
glimpse(ttd2[[ttd2_nms[1]]])
```

```{r}
ttd2_nms[2]
glimpse(ttd2[[ttd2_nms[2]]])
```

If there are more than two datasets, 

```{r}
#| label: ttd3
ttd3 <- get_tt_data("LEGO database")
ttd3_nms <- names(ttd3)
```

```{r}
ttd3_nms
```


## Visualize 

Below are examples of the data visualizations using `inspectdf` in the Shiny app.

### Types

If there are two datasets (`ttd2`):

```{r}
#| label: inspect_plot_type2
#| include: true
#| eval: true
inspect_plot(ttd2, "type")
```


If there is one dataset (`ttd`):

```{r}
#| label: inspect_plot_type
#| include: true
#| eval: true
inspect_plot(ttd, "type")
```



### Missing 

For missing data with two datasets: 

```{r}
#| label: inspect_plot_na2
#| include: true
#| eval: true
inspect_plot(ttd2, "na")
```

```{r}
#| include: false
#| eval: false
inspectdf::inspect_na(
  df1 = ttd2[[ttd2_nms[1]]], 
  df2 = ttd2[[ttd2_nms[2]]]) |> 
  show_plot(text_labels = TRUE) + 
  ggplot2::labs(
    title = paste("Missing data for",
      ttd2_nms[1], "&\n",
      ttd2_nms[2])
    )
```

Missing data for a single dataset (`ttd`): 

```{r}
#| include: false
#| eval: false
inspectdf::inspect_na(
  df1 = ttd[[ttd_nms[1]]], 
  df2 = NULL) |> 
  show_plot(text_labels = TRUE) + 
  ggplot2::labs(
    title = paste("Missing data for", ttd_nms[1])
    )
```

```{r}
#| label: inspect_plot_na1
#| include: true
#| eval: true
inspect_plot(ttd, "na")
```


### Categorical 

1. If there are two datasets with identical character or factor columns, then pass both datasets to `inspect_cat()`   
2. If there is only one dataset in `ttd` (or if the two datasets have different columns), pass both datasets to `inspect_cat()` 

Below is an example with two datasets:

```{r}
#| label: inspect_plot_cat
#| include: true
#| eval: true
inspect_plot(ttd, "cat")
```

```{r}
#| label: inspect_plot_cat2
#| include: true
#| eval: true
inspect_plot(ttd2, "cat")
```

### Numerical

**Only use when data has numerical columns.**

1. Check length of list for 1, 2, or greater than 2       
2. Check columns in each dataset within list for numeric columns      
    - If no numeric columns, print error message   
3. If length of list is 1 (i.e., one dataset)   
    - Pass to data to `inspect_num()` and `ttd_nms[1]` to title      
4. If length of list is 2 (i.e., two datasets)    
    - Pass both to `inspect_num()` and `ttd_nms[1]`/`ttd_nms[2]` to title   
5. If the length of list is greater than 2, 
    - Print a message and pass dataset in position `1` (i.e., `tdd[1]`) to `inspect_num()`    

```{r}
#| include: false
#| eval: false
if (length(ttd_nms) > 2) {
    logr_msg("More than two datasets", level = "INFO")
    inspectdf::inspect_num(
      df1 = ttd[[ttd_nms[1]]]) |> 
      show_plot(text_labels = TRUE) + 
      ggplot2::labs(
        title = paste("Numerical variables in", ttd_nms[1])
        )
} else if (length(ttd_nms) == 2) {
  # get numerical columns in both datasets
  ds1_num_cols <- dplyr::select(ttd[[ttd_nms[1]]], 
                          tidyselect::where(is.numeric))
  ds2_num_cols <- dplyr::select(ttd[[ttd_nms[2]]], 
                          tidyselect::where(is.numeric))
  if (length(ds1_num_cols) > 0) {
    inspectdf::inspect_num(
      df1 = ttd[[ttd_nms[1]]]) |> 
      show_plot(text_labels = TRUE) + 
      ggplot2::labs(
        title = paste("Numerical variables in", ttd_nms[1])
        )
  } 
  if (length(ds2_num_cols) > 0) {
    inspectdf::inspect_num(
      df1 = ttd[[ttd_nms[2]]]) |> 
      show_plot(text_labels = TRUE) + 
      ggplot2::labs(
        title = paste("Numerical variables in", ttd_nms[2])
        )
  }
} else if (length(ttd_nms) == 1) {
    inspectdf::inspect_num(
      df1 = ttd[[ttd_nms[1]]]) |> 
      show_plot(text_labels = TRUE) + 
      ggplot2::labs(
        title = paste("Numerical variables in", ttd_nms[1])
        )
}
```


```{r}
#| label: inspect_plot_num
#| include: true
#| eval: true
inspect_plot(ttd, "num")
```

```{r}
#| label: inspect_plot_num2
#| include: true
#| eval: true
inspect_plot(ttd2, "num")
```

### Correlation

**Only use when data has numerical columns.**

1. Check length of list for 1, 2, or greater than 2       
2. Check columns in each dataset within list for numeric columns      
    - If no numeric columns, print error message   
3. If length of list is 1 (i.e., one dataset)   
    - Check dataset for at least 2 numeric columns (to perform correlation)    
    - Pass to data to `inspect_cor()` and `ttd_nms[1]` to `title`         
4. If length of list is 2 (i.e., two datasets)    
    - Pass both to `inspect_cor()` and `ttd_nms[1]`/`ttd_nms[2]` to `title`   
5. If the length of the list is greater than 2     
    - Print a message   
    - Check dataset in position `1` (i.e., `tdd[1]`) for at least 2 numeric columns (to perform correlation)   
    - Pass the dataset in position `1` (i.e., `tdd[1]`) to `inspect_cor()`   
    

```{r}
#| include: false
#| eval: false
inspectdf::inspect_cor(
      df1 = ttd2[[ttd2_nms[2]]],
      df2 = NULL
  ) |> 
      show_plot(text_labels = TRUE) + 
      ggplot2::labs(
        title = paste("Correlation in", 
          ttd2_nms[2])
        )
inspectdf::inspect_cor(
      df1 = ttd2[[ttd2_nms[1]]],
      df2 = ttd2[[ttd2_nms[2]]]) |> 
      show_plot(text_labels = TRUE) + 
      ggplot2::labs(
        title = paste("Correlation between", 
          ttd2_nms[1], "&",
          ttd2_nms[2])
        )
```


```{r}
#| label: inspect_plot_cor
#| include: true
#| eval: true
inspect_plot(ttd, "cor")
```


```{r}
#| label: inspect_plot_cor2
#| include: true
#| eval: true
inspect_plot(ttd2, "cor")
```


```{r}
#| label: inspect_plot_cor3
#| include: true
#| eval: true
inspect_plot(ttd3, "cor")
```

## The download handler

The download handler (`downloadHandler()`) can be paired with any download UI function (`downloadButton()` or `downloadLink()`).



## Rendering with parameters 






